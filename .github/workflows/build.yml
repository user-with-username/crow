name: Build

on:
  push:
    branches: ['*']

env:
  BIN_NAME: "crow"

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get crate version
        id: get-version
        run: |
          version=$(grep -m1 '^version =' Cargo.toml | cut -d '"' -f2)
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Using version: ${version}"

      - name: Find version change commit
        id: version-commit
        run: |
          
          VERSION="${{ steps.get-version.outputs.version }}"
          COMMIT_HASH=$(git log -p -- Cargo.toml | grep -B5 "^+version = \"$VERSION\"" | grep "^commit" | head -1 | cut -d' ' -f2)
          
          if [ -z "$COMMIT_HASH" ]; then
            COMMIT_HASH=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.target }}
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: linux-x86_64

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: linux-arm64
            use-cross: true

          # mac
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: macos-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: macos-arm64

          # win
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: windows-x64.exe

          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact: windows-x86.exe

    steps:
      - uses: actions/checkout@v4

      - name: Setup cross-compile
        if: matrix.use-cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable
          profile: minimal

      - name: Build
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}
          
          mkdir -p release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          cp "target/${{ matrix.target }}/release/$BIN_NAME$EXT" "release/${{ matrix.artifact }}"

      - name: Upload bins
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: release/${{ matrix.artifact }}

  release:
    name: Create release
    needs: [get-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download bins
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate changelog for this version
        id: changelog
        run: |
          VERSION_COMMIT="${{ needs.get-version.outputs.commit_hash }}"
          
          COMMITS=$(git log --pretty=format:"- %s%n  %b" $VERSION_COMMIT..HEAD | sed '/^  $/d')
          
          if [ -z "$COMMITS" ]; then
            COMMITS=$(git log -1 --pretty=format:"- %s%n  %b" | sed '/^  $/d')
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "### Changelog for v${{ needs.get-version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: "v${{ needs.get-version.outputs.version }}"
          body: |
            Release v${{ needs.get-version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            Thank you for using CRow!
          files: |
            artifacts/linux-x86_64
            artifacts/linux-arm64
            artifacts/macos-x86_64
            artifacts/macos-arm64
            artifacts/windows-x64.exe
            artifacts/windows-x86.exe
          draft: false
          prerelease: false